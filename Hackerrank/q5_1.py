from collections import deque

friends_from = [
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
]
friends_to = [
    2,
    2,
    2,
    2,
    3,
    3,
    3,
    3,
    4,
    4,
    4,
    5,
    5,
    5,
    6,
    6,
    6,
    7,
    7,
    7,
    8,
    8,
    8,
    1,
    1,
    1,
    1,
    3,
    3,
    3,
    3,
    3,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    5,
    5,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    7,
    7,
    7,
    7,
    7,
    7,
    8,
    8,
    8,
    8,
    8,
    1,
    1,
    1,
    1,
    2,
    2,
    2,
    2,
    4,
    5,
    5,
    6,
    7,
    7,
    7,
    7,
    7,
    8,
    8,
    8,
    8,
    1,
    1,
    2,
    2,
    2,
    2,
    3,
    3,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    7,
    7,
    8,
    8,
    8,
    1,
    2,
    2,
    2,
    3,
    3,
    3,
    3,
    4,
    4,
    4,
    4,
    6,
    6,
    6,
    6,
    7,
    7,
    7,
    7,
    7,
    8,
    1,
    2,
    3,
    4,
    4,
    4,
    4,
    4,
    5,
    5,
    5,
    5,
    5,
    7,
    7,
    7,
    7,
    8,
    8,
    1,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    3,
    4,
    4,
    4,
    4,
    5,
    5,
    5,
    5,
    5,
    5,
    6,
    6,
    8,
    8,
    8,
    1,
    1,
    1,
    2,
    2,
    3,
    3,
    4,
    4,
    4,
    5,
    5,
    5,
    5,
    5,
    6,
    6,
    6,
    7,
    7,
    7,
    7,
    7,
]
friends_weight = [
    38,
    40,
    49,
    81,
    31,
    43,
    75,
    95,
    3,
    15,
    24,
    11,
    16,
    55,
    62,
    86,
    89,
    54,
    61,
    90,
    49,
    65,
    88,
    13,
    45,
    66,
    88,
    15,
    31,
    49,
    63,
    77,
    11,
    39,
    46,
    49,
    61,
    66,
    69,
    84,
    1,
    7,
    17,
    39,
    44,
    68,
    81,
    90,
    93,
    99,
    100,
    22,
    38,
    45,
    46,
    63,
    72,
    2,
    4,
    31,
    79,
    94,
    8,
    33,
    52,
    92,
    3,
    4,
    64,
    75,
    67,
    56,
    96,
    82,
    28,
    38,
    61,
    62,
    67,
    2,
    8,
    68,
    96,
    94,
    98,
    5,
    50,
    52,
    82,
    31,
    66,
    5,
    22,
    23,
    26,
    35,
    67,
    72,
    6,
    7,
    11,
    20,
    41,
    62,
    96,
    24,
    63,
    60,
    89,
    97,
    40,
    23,
    78,
    91,
    5,
    47,
    76,
    88,
    6,
    37,
    42,
    83,
    26,
    40,
    63,
    92,
    7,
    26,
    63,
    70,
    98,
    43,
    33,
    78,
    11,
    23,
    26,
    42,
    57,
    84,
    6,
    47,
    88,
    95,
    100,
    14,
    55,
    62,
    83,
    40,
    69,
    97,
    19,
    32,
    40,
    42,
    47,
    53,
    70,
    73,
    91,
    65,
    5,
    17,
    70,
    75,
    5,
    34,
    46,
    59,
    74,
    86,
    22,
    61,
    10,
    25,
    41,
    10,
    48,
    63,
    43,
    100,
    64,
    94,
    7,
    53,
    83,
    69,
    94,
    95,
    96,
    97,
    5,
    13,
    33,
    50,
    52,
    60,
    66,
    90,
]
# ans = 56

# friends_from = [1, 1, 2, 2, 2]
# friends_to = [2, 2, 3, 3, 4]
# friends_weight = [1, 2, 1, 3, 3]
# ans = 12

# friends_from = [1, 7, 5, 10, 6, 2]
# friends_to = [2, 3, 6, 8, 9, 3]
# friends_weight = [51, 51, 51, 51, 51, 51]
# ans = 21


def solution(from_list, to_list, weight_list):
    graph_list = {}

    for i in range(len(from_list)):
        if from_list[i] in graph_list:
            graph_list[from_list[i]].append([to_list[i], weight_list[i], 0])
        else:
            graph_list[from_list[i]] = [[to_list[i], weight_list[i], 0]]

    print(graph_list)

    print("=======================")
    visited = []
    for n in graph_list:
        for i in range(len(graph_list[n])):
            if graph_list[n][i][2] == 1:
                continue
            tmp = [n]
            cost = graph_list[n][i][1]  # n[i] is root
            queue = deque([graph_list[n][i]])

            while queue:
                node = queue.pop()
                tmp.append(node[0])
                print(node)
                # [TODO] 1: [[2, 3, 0], [2, 4, 0]] 이런 경우에 연결안됨
                if node[0] not in graph_list:
                    continue
                node[2] = 1
                tmp_list = graph_list[node[0]]

                for j in tmp_list:
                    if (j[1] == cost) and (j[2] == 0):
                        queue += [j]
            # tmp.append("cost")
            # tmp.append(cost)
            visited.append(tmp)
        print("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@")
        print(n, graph_list[n][i])
        print(visited)

    result = [2, 0]  # max_len, max_score(n*n-1)
    for p in visited:
        print(result)
        if len(p) > result[0]:
            result[0] = len(p)
            p.sort(reverse=True)
            if p[0] * p[1] > result[1]:
                result[1] = p[0] * p[1]

    return result[1]


if __name__ == "__main__":
    print(solution(friends_from, friends_to, friends_weight))
